devtools::build_vignettes()
render(Readme.Rmd)
setwd("C:/Users/harj3477/Jeremy Documents/R materials")
library(StreamVAST)
library(sfnetworks)
# read in the redd data and add a day column
redds<-read.csv("S:/FP/Reg5/Harris, Jeremy/SFToutle_EFLewis_steelhead_redds.csv")
days<-unlist(lapply(strsplit(as.character(redds$survey_date),split=" "),function(x){return(x[[1]])}))
redds$day<-as.integer(strftime(x = strptime(x=days,format="%m/%d/%Y"),format="%j"))
redds$lat<-ifelse(is.na(redds$corrected_latitudewgs84),redds$latitudewgs84,redds$corrected_latitudewgs84)
redds$lon<-ifelse(is.na(redds$corrected_longitudewgs84),redds$longitudewgs84,redds$corrected_longitudewgs84)
names(redds)[names(redds)=="return_yr"]<-"Year"
redds.sf0<-na.omit(data.frame(lat=redds$latitudewgs84,lon=redds$longitudewgs84)[redds$redd_status_code=="NR",])
redds.sf<-st_as_sf(redds.sf0,coords=c("lon","lat"),crs="wgs84")
library(sf)
# read in the redd data and add a day column
redds<-read.csv("S:/FP/Reg5/Harris, Jeremy/SFToutle_EFLewis_steelhead_redds.csv")
days<-unlist(lapply(strsplit(as.character(redds$survey_date),split=" "),function(x){return(x[[1]])}))
redds$day<-as.integer(strftime(x = strptime(x=days,format="%m/%d/%Y"),format="%j"))
redds$lat<-ifelse(is.na(redds$corrected_latitudewgs84),redds$latitudewgs84,redds$corrected_latitudewgs84)
redds$lon<-ifelse(is.na(redds$corrected_longitudewgs84),redds$longitudewgs84,redds$corrected_longitudewgs84)
names(redds)[names(redds)=="return_yr"]<-"Year"
redds.sf0<-na.omit(data.frame(lat=redds$latitudewgs84,lon=redds$longitudewgs84)[redds$redd_status_code=="NR",])
redds.sf<-st_as_sf(redds.sf0,coords=c("lon","lat"),crs="wgs84")
redds.sf2<-st_transform(redds.sf,crs=2286)
unique.redds<-redds[redds$redd_status_code=="NR",]
observed.redds<-redds[redds$redd_status_code%in%c("NR","SV"),]
surveys<-read.csv("S:/FP/Reg5/Harris, Jeremy/SFToutle_EFLewis_steelhead_surveys.csv")
days<-unlist(lapply(strsplit(as.character(surveys$Date),split=" "),function(x){return(x[[1]])}))
surveys$day<-as.integer(strftime(x = strptime(x=days,format="%m/%d/%Y"),format="%j"))
R5hydro<-st_read("S:/FP/Reg5/Harris, Jeremy/Hydro/R5_Stream_Layer.shp")
R5hydro2<-st_transform(R5hydro,crs=2286)
R5hydro3<-st_zm(R5hydro2)
R5hydro4<-st_cast(R5hydro3,"LINESTRING",warn = F)
# Fix the Rock creek naming maddness
R5hydro4$STRM_NAME[R5hydro4$STRM_NAME=="Rock Creek" & is.na(R5hydro4$STRM_NAME)==F]<-paste0("Rock Creek ",LETTERS[1:11])
# Ok, now find roots for the system you need
Lewisroots<-FindRoots(shape = R5hydro4,mainstem = "Lewis River")
# nope, do winter
EFLewisF<-st_read("S:/FP/Reg5/Harris, Jeremy/SPawningFrames/EFLewis_STWI.shp")
EFLewisF2<-st_transform(EFLewisF,crs=2286)
EFLewisF3<-st_zm(EFLewisF2)
EFLewis.root<-na.omit(Lewisroots[Lewisroots$STRM_NAME=="East Fork Lewis River",])
EFLewis.basin<-ExtractBasin(shape = R5hydro4,root = EFLewis.root,basin = "East Fork Lewis River",
exclude=is.na(R5hydro4$STRM_NAME))
FixLoops(network = EFLewis.basin,root = EFLewis.root,guide=EFLewisF3)
FixLoops(network = EFLewis.basin,root = EFLewis.root,guide=list(EFLewisF3))
EFLewis.basin2<-PruneNetwork(network = EFLewis.basin,root = EFLewis.root,match = EFLewisF3)
EFLewis.basin3<-SimplifyNetwork(EFLewis.basin2,tolerance = 500)
plot(EFLewis.basin3)
plot(st_geometry(EFLewisF3),add=T,col=2)
bad.spots<-LocateFeature(EFLewis.basin3,type = "vertex")
bad.spots
is.null(NA)
class(NA)
class(NULL)
c(1,2,3,NULL,4)
# read in the redd data and add a day column
redds<-read.csv("S:/FP/Reg5/Harris, Jeremy/SFToutle_EFLewis_steelhead_redds.csv")
days<-unlist(lapply(strsplit(as.character(redds$survey_date),split=" "),function(x){return(x[[1]])}))
redds$day<-as.integer(strftime(x = strptime(x=days,format="%m/%d/%Y"),format="%j"))
redds$lat<-ifelse(is.na(redds$corrected_latitudewgs84),redds$latitudewgs84,redds$corrected_latitudewgs84)
redds$lon<-ifelse(is.na(redds$corrected_longitudewgs84),redds$longitudewgs84,redds$corrected_longitudewgs84)
names(redds)[names(redds)=="return_yr"]<-"Year"
redds.sf0<-na.omit(data.frame(lat=redds$latitudewgs84,lon=redds$longitudewgs84)[redds$redd_status_code=="NR",])
redds.sf<-st_as_sf(redds.sf0,coords=c("lon","lat"),crs="wgs84")
redds.sf2<-st_transform(redds.sf,crs=2286)
unique.redds<-redds[redds$redd_status_code=="NR",]
observed.redds<-redds[redds$redd_status_code%in%c("NR","SV"),]
surveys<-read.csv("S:/FP/Reg5/Harris, Jeremy/SFToutle_EFLewis_steelhead_surveys.csv")
days<-unlist(lapply(strsplit(as.character(surveys$Date),split=" "),function(x){return(x[[1]])}))
surveys$day<-as.integer(strftime(x = strptime(x=days,format="%m/%d/%Y"),format="%j"))
R5hydro<-st_read("S:/FP/Reg5/Harris, Jeremy/Hydro/R5_Stream_Layer.shp")
R5hydro2<-st_transform(R5hydro,crs=2286)
R5hydro3<-st_zm(R5hydro2)
R5hydro4<-st_cast(R5hydro3,"LINESTRING",warn = F)
# Fix the Rock creek naming maddness
R5hydro4$STRM_NAME[R5hydro4$STRM_NAME=="Rock Creek" & is.na(R5hydro4$STRM_NAME)==F]<-paste0("Rock Creek ",LETTERS[1:11])
# nope, do winter
EFLewisF<-st_read("S:/FP/Reg5/Harris, Jeremy/SPawningFrames/EFLewis_STWI.shp")
EFLewisF2<-st_transform(EFLewisF,crs=2286)
EFLewisF3<-st_zm(EFLewisF2)
# Ok, now find roots for the system you need
Lewisroots<-FindRoots(shape = R5hydro4,mainstem = "Lewis River")
EFLewis.root<-na.omit(Lewisroots[Lewisroots$STRM_NAME=="East Fork Lewis River",])
EFLewis.basin<-ExtractBasin(shape = R5hydro4,root = EFLewis.root,basin = "East Fork Lewis River",
exclude=is.na(R5hydro4$STRM_NAME))
FixLoops(network = EFLewis.basin,root = EFLewis.root,guide=list(EFLewisF3))
network = EFLewis.basin3
!c(T,T,F,F)
class(redds)
class(bad.spots)
st_geometry_type(bad.spots)
st_geometry_type(bad.spots)[1]
st_geometry_type(bad.spots)[1]=="POINT"
exclude=bad.spots
st_distance(network.nodes,exclude)
network.nodes
network.edges<-sf::st_as_sf(sfnetworks::activate(network,"edges"))
network.nodes<-sf::st_as_sf(sfnetworks::activate(network,"nodes"))
network.nodes
st_distance(network.nodes,exclude)
dist.mat<-as.integer(st_distance(network.nodes,exclude))
dist.mat
dist.mat<-st_distance(network.nodes,exclude)
dist.mat
apply(dist.mat,MARGIN = 2,FUN = function(x){return(which(as.integer(x)<.01))})
apply(dist.mat,MARGIN = 2,FUN = function(x){return(which(as.integer(x)>100000))})
dist.mat<-st_distance(network.nodes,exclude)
matches<-vector(length=ncol(dist.mat))
for(i in 1:ncol(dist.mat)){
ifelse(any(dist.mat[,i])<.01,which.min(dist.mat[,i]),NA)
}
for(i in 1:ncol(dist.mat)){
ifelse(any(as.integer(dist.mat[,i]))<.01,which.min(dist.mat[,i]),NA)
}
matches
which.min(dist.mat[,i])
for(i in 1:ncol(dist.mat)){
matches[i]<-ifelse(any(as.integer(dist.mat[,i]))<.01,which.min(dist.mat[,i]),NA)
}
matches
i
dist.mat[,i]
as.numeric(dist.mat[,i])
any(as.numeric(dist.mat[,i]))
any(as.numeric(dist.mat[,i])<.01)
dist.mat<-st_distance(network.nodes,exclude)
matches<-vector(length=ncol(dist.mat))
for(i in 1:ncol(dist.mat)){
matches[i]<-ifelse(any(as.numeric(dist.mat[,i])<.01),which.min(dist.mat[,i]),NA)
}
matches
exclude[is.na(matches)]
is.na(matches)
exclude[is.na(matches),]
st_coordinates(EFLewisF3)
coords<-st_coordinates(EFLewisF3)
i
i=1
line.dat<-subset(coords,L1==i)
names(coords)
colnames(coords)
coords<-as.data.frame(st_coordinates(EFLewisF3))
line.dat<-subset(coords,L1==i)
line.dat
check.points<-exclude
check.points
