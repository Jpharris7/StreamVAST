plot(Stilli.edges$geometry[17],add=T,col=2)
Stilli.root<-st_as_sf(activate(Stilli.root0,"nodes"))[Stilli.edges$from[17]]
Stilli.edges$from
Stilli.edges$from[17]
Stilli.root0
st_as_sf(activate(Stilli.root0,"nodes"))
Stilli.root<-st_as_sf(activate(Stilli.root0,"nodes"))[Stilli.edges$from[17],]
Stilli.root
Stilli2<-ExtractBasin(R4hydro5,root = Stilli.root)
Stilli2<-ExtractBasin(R4hydro5,root = Stilli.root,basin = "Stilliguamish River")
shape = R4hydro5
root = Stilli.root
basin = "Stilliguamish River"
Stilli2<-RootNetwork(R5hydro5,root = Stilli.root)
Stilli2<-RootNetwork(R4hydro5,root = Stilli.root)
Stilli2<-RootNetwork(Makesfnetwork(R4hydro5),root = Stilli.root)
# check for some errors before we waste a lot of processing time
if(missing(basin)){stop("Must specify a basin to extract")}
echeck<-ifelse(missing(exclude),F,is.character(exclude))
root.sf<-PointSetup(point = root,crs = sf::st_crs(shape))
# Setup the network
print("Converting sf lines to sfnetwork")
shape.net<-Makesfnetwork(shape2,attach.data = F)
shape.net2<-RootNetwork(network = shape.net,root=root.sf)
shape2<-shape
shape.net<-Makesfnetwork(shape2,attach.data = F)
shape.net2<-RootNetwork(network = shape.net,root=root.sf)
shape.nodes<-sf::st_as_sf(sfnetworks::activate(shape.net2,'nodes'))
shape.edges<-sf::st_as_sf(sfnetworks::activate(shape.net2,'edges'))
basin
# The ideal method is to specify a basin to extract
if(is.logical(basin)){
b.segments<-shape[which(basin),]
}
if(is.numeric(basin) | is.integer(basin)){
b.segments<-shape[basin,]
}
if(is.character(basin)){
col.matches<-apply(as.data.frame(shape),MARGIN = 2,FUN = function(x){return(sum(basin%in%x))})
b.col<-which.max(col.matches)
b.segments<-shape[which(as.data.frame(shape)[,b.col]%in%basin),]
}
b.nodes.index<-which(apply(sf::st_intersects(b.segments,shape.nodes,sparse=F),MARGIN=2,FUN=any))
b.paths<-sfnetworks::st_network_paths(x = shape.net2,from = root.sf,to = b.nodes.index)[[2]]
b.nodes.cost<-sfnetworks::st_network_cost(shape.net2,from=root.sf,to=b.nodes.index,direction="all")[1,]
col.matches
apply(as.data.frame(shape),MARGIN = 2,FUN = function(x){return(sum(basin%in%x))})
table(R4hydro5$GNIS_Name)
basin
basin="Stillaguamish River"
Stilli2<-ExtractBasin(shape = R4hydro5,root = Stilli.root,basin = "Stillaguamish River")
Stilli2<-ExtractBasin(shape = R4hydro5,root = Stilli.root,basin = "Stillaguamish River",
exclude = is.na(R4hydro5$GNIS_Name))
plot(Stilli2)
EditFeatures(Stilli2)
IdentifyFeatures(Stilli2)
LocateFeatures(Stilli2)
LocateFeature(Stilli2)
LocateFeature(Stilli2,type = "S")
type = "S"
shape = Stilli2
seg<-LocateFeature(shape = Stilli2,type = "S")
if(toupper(type)%in%c("POINT","P","PT")){type<-"POINT"}
if(toupper(type)%in%c("V","VER","VRTX","VERTEX")){type<-"VERTEX"}
if(toupper(type)%in%c("S","SEG","SGMT","SEGMENT")){type<-"SEGMENT"}
if(type%in%c("POINT","VERTEX","SEGMENT")==F){stop("Invalid 'type' argument!")}
# Setup some plot parameters
bounds<-sf::st_bbox(shape)
xspan<-(bounds$xmax-bounds$xmin)
yspan<-(bounds$ymax-bounds$ymin)
midpoint<-c(X=mean(c(bounds$xmin,bounds$xmax)),Y=mean(c(bounds$ymin,bounds$ymax)))
# set up a network
if(class(shape)[1]=="sfnetwork"){
shape.edges<-sf::st_as_sf(sfnetworks::activate(shape,"edges"))
shape.nodes<-sf::st_as_sf(sfnetworks::activate(shape,"nodes"))
shape.net<-shape
}else{
if(type=="VERTEX"){warning("Vertex Indexing may be unstable if shape is not a sfnetwork")}
shape.net<-suppressWarnings(sfnetworks::as_sfnetwork(shape))
shape.edges<-sf::st_as_sf(sfnetworks::activate(shape.net,"edges"))
shape.nodes<-sf::st_as_sf(sfnetworks::activate(shape.net,"nodes"))
}
# output object
if(type%in%c("POINT","VERTEX")){out.sf<-shape.nodes[0,]}
if(type=="SEGMENT"){out.sf<-shape.edges[0,]}
still.going<-T
while(still.going){
# start by plotting the network and show any updates
plot(sf::st_geometry(shape.edges),xlim=c(midpoint[1]-xspan/2,midpoint[1]+xspan/2),
ylim=c(midpoint[2]-yspan/2,midpoint[2]+yspan/2),pch=16)
plot(sf::st_geometry(shape.nodes),pch=16,add=T,col=1)
plot(sf::st_geometry(out.sf),add=T,col=4,pch=16,cex=1.25,lwd=1.25)
# user chooses an action
response<-readline(prompt="Choose an action : CENTER/zoomIN/zoomOUT/SELECT/FINISH")
# adjust for spelling or abbreviations by the user
if(toupper(response)%in%c("C","CEN","CENT","CNTR","CENTER")){resp<-"CENTER"}
if(toupper(response)%in%c("S","SEL","SE","SLCT","SELECT")){resp<-"SELECT"}
if(toupper(response)%in%c("F","FIN","FI","FINISH")){resp<-"FINISH"}
if(toupper(response)%in%c("I","IN","ZOOMIN")){resp<-"IN"}
if(toupper(response)%in%c("O","OUT","ZOOMOUT")){resp<-"OUT"}
# if finished, flag to not repeat the loop
if(resp=="FINISH"){still.going<-F}
# if center or zoom, adjust plot parameters
if(resp%in%c("IN","OUT")){
scale<-ifelse(resp=="IN",2,.5)
xspan<-xspan/scale
yspan<-yspan/scale
}
if(resp%in%c("C","CEN","CENTER")){
print("Please click on the image to center.")
midpoint<-unlist(graphics::locator(n=1))
}
# if selecting a feature, prompt the user to pick
if(resp=="SELECT"){
print("Please click on the image to select a feature")
user.pick<-unlist(graphics::locator(n=1))
user.sf<-sf::st_as_sf(data.frame(x=user.pick[1],y=user.pick[2]),coords=1:2,crs=sf::st_crs(shape))
# because of CompSci shenanigans, this point is often not quite on the line, so fix that
if(type=="POINT"){
shape.line<-shape.edges[sf::st_nearest_feature(user.sf,shape.edges),]
pick0<-sf::st_as_sf(sf::st_cast(sf::st_nearest_points(user.sf,shape.line),"POINT"))[2,]
temp.net<-suppressWarnings(sfnetworks::st_network_blend(shape.net,pick0))
temp.nodes<-sf::st_as_sf(sfnetworks::activate(temp.net,"nodes"))
temp.edges<-sf::st_as_sf(sfnetworks::activate(temp.net,"edges"))
pick.sf<-temp.nodes[sf::st_nearest_feature(pick0,temp.nodes),]
plot(sf::st_geometry(pick.sf),add=T,pch=21,bg=6)
}
if(type=="VERTEX"){
pick.index<-sf::st_nearest_feature(user.sf,shape.nodes)
pick.sf<-shape.nodes[pick.index,]
pick.sf$Index<-pick.index
plot(sf::st_geometry(pick.sf),add=T,pch=21,bg=6)
}
if(type=="SEGMENT"){
pick.index<-sf::st_nearest_feature(user.sf,shape.edges)
pick.sf<-shape.edges[pick.index,]
pick.sf$Index<-pick.index
plot(sf::st_geometry(pick.sf),add=T,col=6,lwd=2)
}
}
# Have the user confirm the correct feature was selected
if(resp=="SELECT"){
good.pick<-toupper(readline(prompt = "Is this correct (Y/N)?   "))
if(toupper(good.pick)%in%c("Y","YES","T",T)){
out.sf<-rbind(out.sf,pick.sf)
}
}
}
#' Allows the user to select a number of shapes from a sf object or network by clicking
#' in the plot window. A shape will be converted to a sfnetwork first
#'
#' @param shape A sf object with LINESTRING geometry or a sfnetwork
#' @param type Either "POINT", "VERTEX" or "SEGMENT" which indicates the type of shape to select
#'
#' @return A sf object containing the POINTS or LINESTRINGS selected by the user
#' @export
#'
#' @examples
LocateFeature<-function(shape,type){
if(toupper(type)%in%c("POINT","P","PT")){type<-"POINT"}
if(toupper(type)%in%c("V","VER","VRTX","VERTEX")){type<-"VERTEX"}
if(toupper(type)%in%c("S","SEG","SGMT","SEGMENT")){type<-"SEGMENT"}
if(type%in%c("POINT","VERTEX","SEGMENT")==F){stop("Invalid 'type' argument!")}
# Setup some plot parameters
bounds<-sf::st_bbox(shape)
xspan<-(bounds$xmax-bounds$xmin)
yspan<-(bounds$ymax-bounds$ymin)
midpoint<-c(X=mean(c(bounds$xmin,bounds$xmax)),Y=mean(c(bounds$ymin,bounds$ymax)))
# set up a network
if(class(shape)[1]=="sfnetwork"){
shape.edges<-sf::st_as_sf(sfnetworks::activate(shape,"edges"))
shape.nodes<-sf::st_as_sf(sfnetworks::activate(shape,"nodes"))
shape.net<-shape
}else{
if(type=="VERTEX"){warning("Vertex Indexing may be unstable if shape is not a sfnetwork")}
shape.net<-suppressWarnings(sfnetworks::as_sfnetwork(shape))
shape.edges<-sf::st_as_sf(sfnetworks::activate(shape.net,"edges"))
shape.nodes<-sf::st_as_sf(sfnetworks::activate(shape.net,"nodes"))
}
# output object
if(type%in%c("POINT","VERTEX")){out.sf<-shape.nodes[0,]}
if(type=="SEGMENT"){out.sf<-shape.edges[0,]}
still.going<-T
while(still.going){
# start by plotting the network and show any updates
plot(sf::st_geometry(shape.edges),xlim=c(midpoint[1]-xspan/2,midpoint[1]+xspan/2),
ylim=c(midpoint[2]-yspan/2,midpoint[2]+yspan/2),pch=16)
plot(sf::st_geometry(shape.nodes),pch=16,add=T,col=1)
plot(sf::st_geometry(out.sf),add=T,col=4,pch=16,cex=1.25,lwd=1.25)
# user chooses an action
response<-readline(prompt="Choose an action : CENTER/zoomIN/zoomOUT/SELECT/FINISH")
# adjust for spelling or abbreviations by the user
if(toupper(response)%in%c("C","CEN","CENT","CNTR","CENTER")){resp<-"CENTER"}
if(toupper(response)%in%c("S","SEL","SE","SLCT","SELECT")){resp<-"SELECT"}
if(toupper(response)%in%c("F","FIN","FI","FINISH")){resp<-"FINISH"}
if(toupper(response)%in%c("I","IN","ZOOMIN")){resp<-"IN"}
if(toupper(response)%in%c("O","OUT","ZOOMOUT")){resp<-"OUT"}
# if finished, flag to not repeat the loop
if(resp=="FINISH"){still.going<-F}
# if center or zoom, adjust plot parameters
if(resp%in%c("IN","OUT")){
scale<-ifelse(resp=="IN",2,.5)
xspan<-xspan/scale
yspan<-yspan/scale
}
if(resp%in%c("C","CEN","CENTER")){
print("Please click on the image to center.")
midpoint<-unlist(graphics::locator(n=1))
}
# if selecting a feature, prompt the user to pick
if(resp=="SELECT"){
print("Please click on the image to select a feature")
user.pick<-unlist(graphics::locator(n=1))
user.sf<-sf::st_as_sf(data.frame(x=user.pick[1],y=user.pick[2]),coords=1:2,crs=sf::st_crs(shape))
# because of CompSci shenanigans, this point is often not quite on the line, so fix that
if(type=="POINT"){
shape.line<-shape.edges[sf::st_nearest_feature(user.sf,shape.edges),]
pick0<-sf::st_as_sf(sf::st_cast(sf::st_nearest_points(user.sf,shape.line),"POINT"))[2,]
temp.net<-suppressWarnings(sfnetworks::st_network_blend(shape.net,pick0))
temp.nodes<-sf::st_as_sf(sfnetworks::activate(temp.net,"nodes"))
temp.edges<-sf::st_as_sf(sfnetworks::activate(temp.net,"edges"))
pick.sf<-temp.nodes[sf::st_nearest_feature(pick0,temp.nodes),]
plot(sf::st_geometry(pick.sf),add=T,pch=21,bg=6)
}
if(type=="VERTEX"){
pick.index<-sf::st_nearest_feature(user.sf,shape.nodes)
pick.sf<-shape.nodes[pick.index,]
pick.sf$Index<-pick.index
plot(sf::st_geometry(pick.sf),add=T,pch=21,bg=6)
}
if(type=="SEGMENT"){
pick.index<-sf::st_nearest_feature(user.sf,shape.edges)
pick.sf<-shape.edges[pick.index,]
pick.sf$Index<-pick.index
plot(sf::st_geometry(pick.sf),add=T,col=6,lwd=2)
}
}
# Have the user confirm the correct feature was selected
if(resp=="SELECT"){
good.pick<-toupper(readline(prompt = "Is this correct (Y/N)?   "))
if(toupper(good.pick)%in%c("Y","YES","T",T)){
out.sf<-rbind(out.sf,pick.sf)
}
}
}
sf::st_geometry(out.sf)<-"geometry"
return(out.sf)
}
seg<-LocateFeature(shape = Stilli2,type = "S")
seg
Stilli2
Stilli3<-AttachData(shape = Stilli2,refshape = R4hydro5,fields = "GNIS_Name")
Stilli3
View(Stilli3)
still.edges3<-st_as_sf(activate(Stilli3,"edges"))
table(still.edges3)
stilli.edges3<-st_as_sf(activate(Stilli3,"edges"))
table(Stilli.edges3$GNIS_Name)
Stilli.edges3<-st_as_sf(activate(Stilli3,"edges"))
table(Stilli.edges3$GNIS_Name)
seg<-LocateFeature(shape = Stilli2,type = "S")
seg
seg<-LocateFeature(shape = Stilli3,type = "S")
seg
plot(seg$geometry,col=factor(seg$GNIS_Name))
table(Stilli.edges3$GNIS_Name)
y
Stilli.edges3[unlist(lapply(strsplit(R4hydro5$GNIS_Name,split=" "),FUN=function(x){return(any(x=="Stillaguamish"))}),]
Stilli.proper<-Stilli.edges3[unlist(lapply(strsplit(R4hydro5$GNIS_Name,split=" "),
FUN=function(x){return(any(x=="Stillaguamish"))})),]
Stilli.proper<-Stilli.edges3[unlist(lapply(strsplit(Stilli.edges3$GNIS_Name,split=" "),
FUN=function(x){return(any(x=="Stillaguamish"))})),]
Stilli.proper
Stilli.net<-Makesfnetwork(Stilli.proper)
Stilli.net
Stilli.proper
Stilli.net<-Makesfnetwork(shape=Stilli.proper,)
shape=Stilli.proper
shape.net0<-sfnetworks::as_sfnetwork(sf::st_as_sf(shape))
?as_sfnetwork
Stilli.net<-Makesfnetwork(shape=Stilli.proper[-(1:2),])
Stilli.proper[-(1:2),]
(1:2)
-(1:2)
Stilli.proper[-1,]
Stilli.proper
Stilli.proper<-Stilli.proper[3:4,]
Stilli.proper
Stilli.proper<-Stilli.edges3[unlist(lapply(strsplit(Stilli.edges3$GNIS_Name,split=" "),
FUN=function(x){return(any(x=="Stillaguamish"))})),]
st_as_sf(Stilli.proper)
str(Stilli.proper)
Stilli.net<-Makesfnetwork(shape=as.data.frame(Stilli.proper)[-c(1:2),])
as.data.frame(Stilli.proper)[-c(1:2)
,]
Stilli.net<-Makesfnetwork(shape=Stilli.proper)[,-c(1:2)])
Stilli.net<-Makesfnetwork(shape=Stilli.proper[,-c(1:2)])
Stilli.net
seg
cook.slough<-seg[2:3,]
cook.slough
Stilli.net2<-SimplifyNetwork(Stilli.net)
survey.ends<-st_as_sf(data.frame(lon=c(48.102827,48.2818077),lat=c(-121.957697,-121.6411968)),coords = 1:2,crs="wgs84")
survey.ends2<-st_transform(survey.ends,crs=2285)
survey.ends2
survey.ends<-st_as_sf(data.frame(lon=c(48.102827,48.2818077),lat=c(-121.957697,-121.6411968)),coords = 1:2,crs="wgs84")
survey.ends
survey.ends2<-st_transform(survey.ends,crs=2285)
survey.ends2
survey.ends<-st_sf(data.frame(lon=c(48.102827,48.2818077),lat=c(-121.957697,-121.6411968)),coords = 1:2,crs="wgs84")
?st_transform
Stilli.net3
Stilli.net2
survey.ends
Stilli.edges3
st_transform(survey.ends,crs=2285)
survey.ends
survey.ends2<-st_transform(survey.ends,crs=2286)
survey.ends2
survey.ends2<-st_transform(survey.ends,crs=2285)
survey.ends2
survey.ends
data.frame(lon=c(48.102827,48.2818077),lat=c(-121.957697,-121.6411968))
survey.ends<-st_as_sf(data.frame(lat=c(48.102827,48.2818077),lon=c(-121.957697,-121.6411968)),coords = 2:1,crs="wgs84")
survey.ends2<-st_transform(survey.ends,crs=2285)
survey.ends2
Stilli.net3<-AddFeatures(network = Stilli.net2,nodes = survey.ends2)
Stilli.net4<-EditFeatures(shape = Stilli.net3,root = Stilli.root)
nodes = survey.ends2
tolerance=200
tolerance2=10
root = Stilli.root
shape = Stilli.net3
if(class(shape)[1]!="sfnetwork"){
shape.net<-Makesfnetwork(shape)
}else{
shape.net<-shape
}
shape.nodes<-sf::st_as_sf(sfnetworks::activate(shape.net,"nodes"))
shape.edges<-sf::st_as_sf(sfnetworks::activate(shape.net,"edges"))
still.going<-T
# Setup some plot parameters
bounds<-sf::st_bbox(shape.edges)
xspan<-(bounds$xmax-bounds$xmin)
yspan<-(bounds$ymax-bounds$ymin)
cost.mat<-sfnetworks::st_network_cost(shape.net)
root.index<-which(apply(cost.mat,MARGIN = 1,FUN=function(x){return(any(is.infinite(x))==F)}))
has.root<-length(root.index)>0
if(has.root){root.sf<-shape.nodes[root.index,]}
#make a copy of the shapes, so that we have original and updated version
temp.net<-shape.net
temp.edges<-shape.edges
temp.nodes<-shape.nodes
new.points<-shape.nodes[0,]
midpoint<-c(X=mean(c(bounds$xmin,bounds$xmax)),Y=mean(c(bounds$ymin,bounds$ymax)))
# user input loop
while(still.going){
# start by plotting the network and show any updates
plot(sf::st_geometry(shape.edges),xlim=c(midpoint[1]-xspan/2,midpoint[1]+xspan/2),
ylim=c(midpoint[2]-yspan/2,midpoint[2]+yspan/2))
plot(sf::st_geometry(shape.edges),add=T,col=2)
plot(sf::st_geometry(shape.nodes),pch=21,add=T,col=1,bg=2)
plot(sf::st_geometry(temp.edges),add=T,col=1)
plot(sf::st_geometry(temp.nodes),add=T,col=1,pch=16)
if(nrow(new.points)>0){plot(sf::st_geometry(new.points),add=T,pch=21,col=1,bg=4)}
# user chooses an action
response<-readline(prompt="Choose an action : CENTER/zoomIN/zoomOUT/ADD/REMOVE/FINISH")
# adjust for spelling or abbreviations by the user
if(toupper(response)%in%c("C","CEN","CENT","CNTR","CENTER")){resp<-"CENTER"}
if(toupper(response)%in%c("A","AD","ADD")){resp<-"ADD"}
if(toupper(response)%in%c("R","RE","RMOVE","RM","REMOVE")){resp<-"REMOVE"}
if(toupper(response)%in%c("S","SEL","SE","SLCT","SELECT")){resp<-"SELECT"}
if(toupper(response)%in%c("F","FIN","FI","FINISH")){resp<-"FINISH"}
if(toupper(response)%in%c("I","IN","ZOOMIN")){resp<-"IN"}
if(toupper(response)%in%c("O","OUT","ZOOMOUT")){resp<-"OUT"}
# if finished, flag to not repeat the loop
if(resp=="FINISH"){still.going<-F}
# if center or zoom, adjust plot parameters
if(resp%in%c("IN","OUT")){
scale<-ifelse(resp=="IN",2,.5)
xspan<-xspan/scale
yspan<-yspan/scale
}
if(resp%in%c("C","CEN","CENTER")){
print("Please click on the image to center.")
midpoint<-unlist(graphics::locator(n=1))
}
# Can add a point to the network
if(resp=="ADD"){
print("Please click on the image to add a point")
user.pick<-unlist(graphics::locator(n=1))
user.sf<-sf::st_as_sf(data.frame(x=user.pick[1],y=user.pick[2]),coords=1:2,crs=sf::st_crs(shape))
shape.line<-temp.edges[sf::st_nearest_feature(user.sf,temp.edges),]
pick0<-sf::st_as_sf(sf::st_cast(sf::st_nearest_points(user.sf,shape.line),"POINT"))[2,]
# because of CompSci shenanigans, this point is often not quite on the line
# but sf_networks is good at fixing the problem
temp.net0<-suppressWarnings(sfnetworks::st_network_blend(temp.net,pick0))
temp.nodes0<-sf::st_as_sf(sfnetworks::activate(temp.net0,"nodes"))
temp.edges0<-sf::st_as_sf(sfnetworks::activate(temp.net0,"edges"))
pick.sf<-temp.nodes0[sf::st_nearest_feature(pick0,temp.nodes0),]
plot(sf::st_geometry(pick.sf),add=T,pch=21,bg=3)
}
# if removing features, the user must choose vertex or segment
if(resp=="REMOVE"){
type<-readline(prompt = "What type of feature would you like to select?  (VERTEX/SEGMENT)")
if(toupper(type)%in%c("V","VER","VRTX","VERTEX","POINT","P","PT")){type<-"VERTEX"}
if(toupper(type)%in%c("S","SEG","SGMT","SEGMENT")){type<-"SEGMENT"}
print("Please click on the image to select a feature")
user.pick<-unlist(graphics::locator(n=1))
user.sf<-sf::st_as_sf(data.frame(x=user.pick[1],y=user.pick[2]),coords=1:2,crs=sf::st_crs(shape))
# When removing a vertex, you can't remove the root
if(type=="VERTEX"){
pick.index<-sf::st_nearest_feature(user.sf,temp.nodes)
if(has.root & pick.index==root.index){
warning("Can not remove the root! Selection canceled!")
resp<-"none"
}
connect.edges<-temp.edges[temp.edges$from==pick.index | temp.edges$to==pick.index,]
#if the vertex is an endpoint, its safe to delete the segment as well
if(nrow(connect.edges)==1){
bad.edges<-which(temp.edges$to==pick.index)
plot(sf::st_geometry(temp.edges[bad.edges,]),add=T,lwd=2,col=6)
temp.net0<-sfnetworks::as_sfnetwork(temp.edges[-bad.edges,])
}
# if the vertex has exactly two edges, then it is internal, so delete the vertex and combine the edges
if(nrow(connect.edges)==2){
old.edges<-temp.edges[temp.edges$from!=pick.index & temp.edges$to!=pick.index,]
new.edges<-sf::st_as_sf(c(sf::st_geometry(old.edges),sf::st_line_merge(sf::st_combine(connect.edges))))
temp.net0<-sfnetworks::as_sfnetwork(new.edges)
}
# if the vertex has 3 or more edges, then it's important to have a root
if(nrow(connect.edges)>=3){
if(has.root==F){
warning("Can not resolve network without root! Remove other features first!")
resp<-"none"
temp.net0<-temp.net
}else{
bad.edges<-connect.edges
bad.nodes<-temp.nodes[unique(c(connect.edges$from,connect.edges$to)),]
temp.net0<-sfnetworks::as_sfnetwork(temp.edges[temp.edges$from!=pick.index & temp.edges$to!=pick.index,])
temp.edges0<-sf::st_as_sf(sfnetworks::activate(temp.net0,"edges"))
temp.nodes0<-sf::st_as_sf(sfnetworks::activate(temp.net0,"nodes"))
bad.nodes.index<-which(is.infinite(sfnetworks::st_network_cost(x=temp.net0,from = root.sf)[1,]))
bad.edges.index<-which(temp.edges0$from%in%bad.nodes.index | temp.edges0$to%in%bad.nodes.index)
bad.edges<-rbind(bad.edges,temp.edges0[bad.edges.index,])
bad.nodes<-rbind(bad.nodes,temp.nodes0[bad.nodes.index,])
plot(sf::st_geometry(bad.edges),add=T,lwd=2,col=6)
plot(sf::st_geometry(bad.nodes),add=T,col=6,pch=16)
temp.net0<-sfnetworks::as_sfnetwork(temp.edges0[-bad.edges.index,])
}
}
temp.nodes0<-sf::st_as_sf(sfnetworks::activate(temp.net0,"nodes"))
temp.edges0<-sf::st_as_sf(sfnetworks::activate(temp.net0,"edges"))
plot(sf::st_geometry(temp.nodes[pick.index,]),add=T,pch=21,col=1,bg=6,cex=1.5)
}
# if removing segments, can remove just a segment or prune the tree
if(type=="SEGMENT"){
pick.index<-sf::st_nearest_feature(user.sf,temp.edges)
temp.net0<-sfnetworks::as_sfnetwork(temp.edges[-pick.index,])
if(has.root){
temp.nodes0<-sf::st_as_sf(sfnetworks::activate(temp.net0,"nodes"))
temp.edges0<-sf::st_as_sf(sfnetworks::activate(temp.net0,"edges"))
bad.nodes.index<-which(apply(sf::st_intersects(temp.nodes,temp.nodes0,sparse=F),MARGIN = 1,FUN = sum)==0)
bad.nodes.index2<-which(is.infinite(sfnetworks::st_network_cost(temp.net0,root.sf)[1,]))
bad.edges.index<-which(temp.edges0$from%in%bad.nodes.index2 | temp.edges0$to%in%bad.nodes.index2)
if(length(bad.nodes.index)>0){plot(sf::st_geometry(temp.nodes[bad.nodes.index,]),add=T,col=6,pch=16)}
if(length(bad.edges.index)>0){
plot(sf::st_geometry(temp.edges0[bad.edges.index,]),add=T,lwd=2,col=6)
temp.net0<-sfnetworks::as_sfnetwork(temp.edges0[-bad.edges.index,])
temp.edges0<-sf::st_as_sf(sfnetworks::activate(temp.net0,"edges"))
temp.nodes0<-sf::st_as_sf(sfnetworks::activate(temp.net0,"nodes"))
}
}
plot(sf::st_geometry(temp.edges[pick.index,]),add=T,col=6,lwd=2)
}
}
# Have the user confirm the correct feature was selected
if(resp%in%c("REMOVE","ADD")){
good.pick<-toupper(readline(prompt = "Is this correct (Y/N)?   "))
if(toupper(good.pick)%in%c("Y","YES","T",T)){
temp.net<-temp.net0
temp.edges<-sf::st_as_sf(sfnetworks::activate(temp.net,"edges"))
temp.nodes<-sf::st_as_sf(sfnetworks::activate(temp.net,"nodes"))
if(has.root){
cost.mat<-sfnetworks::st_network_cost(temp.net)
root.index<-which(apply(cost.mat,MARGIN = 1,FUN=function(x){return(any(is.infinite(x))==F)}))
}
if(resp=="ADD"){new.points<-rbind(new.points,pick.sf)}
}
}
}
pick.index
temp.nodes0
temp.net0
temp.edges
temp.net0<-sfnetworks::as_sfnetwork(temp.edges[-pick.index,])
colnames(temp.edges)
temp.net0<-sfnetworks::as_sfnetwork(temp.edges[-pick.index,which(colnames(temp.edges)]!="from"))
temp.net0<-sfnetworks::as_sfnetwork(temp.edges[-pick.index,which(colnames(temp.edges)!="from")])
temp.net0<-sfnetworks::as_sfnetwork(temp.edges[-pick.index,which(colnames(temp.edges)%in%c("from","to"))])
temp.edges[-pick.index,which(colnames(temp.edges)%in%c("from","to"))]
temp.net0<-sfnetworks::as_sfnetwork(temp.edges[-pick.index,which(colnames(temp.edges)%in%c("from","to")==F)])
source("C:/Users/harj3477/Jeremy Documents/R materials/StreamVAST/R/Functions_shapeprep.R")
Stilli.net4<-EditFeatures(shape = Stilli.net3,root = Stilli.root)
Stilli.net4
Stilli.net5<-AddFeatures(network = Stilli.net4,edges = cook.slough)
Stilli.net5<-AddFeatures(network = Stilli.net4,edges = cook.slough[1,])
Stilli.net5<-AddFeatures(network = Stilli.net4,edges = cook.slough[2,])
plot(Stilli.net5)
Stilli.net5<-AddFeatures(network = Stilli.net4,edges = cook.slough[1,])
Stilli.net5<-AddFeatures(network = Stilli.net5,edges = cook.slough[2,])
plot(Stilli.net5)
